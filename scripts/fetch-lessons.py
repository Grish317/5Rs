import os
import django
import requests

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")
django.setup()

from users.models import LearningTrack, Lesson

API_KEY = "AIzaSyADQ0Cpx7S7Z6gat_ywqBB4QIZH-N2u3c4"  # Hardcoded for now
BASE_URL = "https://www.googleapis.com/youtube/v3/search"

# Queries for each category
CATEGORIES = {
    "life": [
        "first aid basics",
        "nutrition for children",
        "mental wellness"
    ],
    "income": [
        "how to make pickles",
        "soap making",
        "how to sew kurta"
    ]
}

MAX_RESULTS = 5


def fetch_youtube_videos(query):
    params = {
        "part": "snippet",
        "q": query,
        "key": API_KEY,
        "type": "video",
        "maxResults": MAX_RESULTS,
    }

    response = requests.get(BASE_URL, params=params)
    if response.status_code != 200:
        print(f"Failed to fetch for '{query}': {response.status_code}")
        return []

    items = response.json().get("items", [])
    return items


def get_or_create_track(category, query):
    track_title = query.title()
    track, _ = LearningTrack.objects.get_or_create(
        title=track_title,
        category=category,
        defaults={"description": f"Autogenerated track for {query}"}
    )
    return track


def create_lessons_for_query(query, category):
    print(f"üîç Fetching lessons for: '{query}' in category: {category}")
    videos = fetch_youtube_videos(query)
    track = get_or_create_track(category, query)

    for video in videos:
        vid = video['id']['videoId']
        snippet = video['snippet']
        title = snippet['title']
        thumbnail = snippet['thumbnails']['high']['url']
        video_url = f"https://www.youtube.com/watch?v={vid}"

        if Lesson.objects.filter(youtube_id=vid).exists():
            print(f"‚è≠Ô∏è Skipping duplicate: {title}")
            continue

        Lesson.objects.create(
            track=track,
            title=title,
            video_url=video_url,
            thumbnail_url=thumbnail,
            youtube_id=vid,
            tags=query
        )
        print(f"‚úÖ Added lesson: {title}")


def main():
    for category, queries in CATEGORIES.items():
        for query in queries:
            create_lessons_for_query(query, category)
            time.sleep(1.5)


if __name__ == "__main__":
    main()
